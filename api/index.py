from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import asyncio
import random
import logging
import os
import json
import requests

# üîê –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN', '7325353221:AAEta0uc1hlRSOEDiIsvYkBwbgza7Y-oPlM')

# –ë–∞–∑–∞ —Å–ª–æ–≤: –Ω–µ–º–µ—Ü–∫–æ–µ —Å–ª–æ–≤–æ ‚Üí —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥
GERMAN_WORDS = [
  {"ge": "riechen", "ru": "–Ω—é—Ö–∞—Ç—å"},
  {"ge": "der geruch", "ru": "–∑–∞–ø–∞—Ö"},
  {"ge": "w√ºrde", "ru": "–±—ã"},
  {"ge": "der ellenbogen", "ru": "–ª–æ–∫–æ—Ç—å"},
  {"ge": "das ist verkehrt", "ru": "—ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"},
  {"ge": "damit", "ru": "—Å —ç—Ç–∏–º  —á—Ç–æ –±—ã"},
  {"ge": "werfen", "ru": "–∫–∏–¥–∞—Ç—å"},
  {"ge": "dringend", "ru": "—Å—Ä–æ—á–Ω–æ"},
  {"ge": "angenehm", "ru": "–ø—Ä–∏—è—Ç–Ω—ã–π"},
  {"ge": "froh", "ru": "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π"},
  {"ge": "prima", "ru": "–æ—Ç–ª–∏—á–Ω—ã–π"},
  {"ge": "komisch", "ru": "—Å—Ç—Ä–∞–Ω–Ω—ã–π"},
  {"ge": "witzig", "ru": "—Å–º–µ—à–Ω–æ–π"},
  {"ge": "ruhig", "ru": "—Å–ø–æ–∫–æ–π–Ω—ã–π"},
  {"ge": "sicher", "ru": "—É–≤–µ—Ä–µ–Ω–Ω—ã–π"},
  {"ge": "verr√ºckt", "ru": "—Å—É–º–∞—Å—à–µ–¥—à–∏–π"},
  {"ge": "schlau", "ru": "—É–º–Ω—ã–π"},
  {"ge": "flei√üig", "ru": "—Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π"},
  {"ge": "faul", "ru": "–ª–µ–Ω–∏–≤—ã–π"},
  {"ge": "vorsicht", "ru": "–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ"}
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤
active_chats = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    active_chats.add(chat_id)

    keyboard = [
        [InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='stop')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data='menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–∏—Ö —Å–ª–æ–≤.\n"
        "–ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã 40 —Å–µ–∫—É–Ω–¥ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ.\n"
        "–£—á–∏—Å—å –ª–µ–≥–∫–æ –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üí™\n\n"
        "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in active_chats:
        active_chats.remove(chat_id)
        status = "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    else:
        status = "—É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='start')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data='menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ {status}!</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total_words = len(GERMAN_WORDS)
    active_users = len(active_chats)

    keyboard = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='start')],
        [InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='stop')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data='menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ –±–∞–∑–µ: <b>{total_words}</b>\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{active_users}</b>\n"
        f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏: <b>2 –º–∏–Ω—É—Ç—ã 40 —Å–µ–∫—É–Ω–¥</b>\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è! üöÄ",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    if query.data == 'start':
        active_chats.add(chat_id)
        await query.edit_message_text(
            "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n"
            "–ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã 40 —Å–µ–∫—É–Ω–¥ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.\n"
            "–£—á–∏—Å—å –ª–µ–≥–∫–æ –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üí™",
            parse_mode="HTML",
            reply_markup=query.message.reply_markup
        )
    elif query.data == 'stop':
        active_chats.discard(chat_id)
        await query.edit_message_text(
            "‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n"
            "–ù–∞–∂–º–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.",
            parse_mode="HTML",
            reply_markup=query.message.reply_markup
        )
    elif query.data == 'stats':
        total_words = len(GERMAN_WORDS)
        active_users = len(active_chats)
        await query.edit_message_text(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üìö –°–ª–æ–≤ –≤ –±–∞–∑–µ: <b>{total_words}</b>\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active_users}</b>",
            parse_mode="HTML",
            reply_markup=query.message.reply_markup
        )
    elif query.data == 'menu':
        status = "‚úÖ –∞–∫—Ç–∏–≤–Ω–∞" if chat_id in active_chats else "‚ùå –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å" if chat_id not in active_chats else "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data='start' if chat_id not in active_chats else 'stop')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üéõÔ∏è <b>–ú–µ–Ω—é</b>\n\n"
            f"üì° –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
            f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=reply_markup
        )

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = None

def create_app():
    global application
    if application is None:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("stop", stop))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CallbackQueryHandler(button_callback))
        
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    return application

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è Vercel
def handler(request):
    app = create_app()
    
    if request.method == "POST":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            loop.run_until_complete(app.initialize())
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            update_data = request.get_json()
            if update_data:
                update = Update.de_json(update_data, app.bot)
                if update:
                    loop.run_until_complete(app.process_update(update))
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
            loop.run_until_complete(app.shutdown())
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ handler: {e}")
        finally:
            if 'loop' in locals():
                loop.close()
    
    return {"statusCode": 200, "body": "OK"}