import { Context } from 'telegraf';
import { getRandomWord, GermanWord } from '../data/german-words';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface ActiveUser {
  userId: number;
  chatId: number;
  intervalId: NodeJS.Timeout;
  isActive: boolean;
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤
export class WordScheduler {
  private activeUsers: Map<number, ActiveUser> = new Map();
  private readonly intervalMs: number = 10000; // 10 —Å–µ–∫—É–Ω–¥

  // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  public addUser(userId: number, chatId: number, ctx: Context): void {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ
    this.removeUser(userId);

    const intervalId = setInterval(async () => {
      try {
        const word = getRandomWord();
        await this.sendWordMessage(ctx, word);
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        this.removeUser(userId);
      }
    }, this.intervalMs);

    this.activeUsers.set(userId, {
      userId,
      chatId,
      intervalId,
      isActive: true
    });

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤`);
  }

  // –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  public removeUser(userId: number): boolean {
    const user = this.activeUsers.get(userId);
    if (user) {
      clearInterval(user.intervalId);
      this.activeUsers.delete(userId);
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–¥–∞–ª–µ–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è`);
      return true;
    }
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  public isUserActive(userId: number): boolean {
    const user = this.activeUsers.get(userId);
    return user ? user.isActive : false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  public getActiveUsersCount(): number {
    return this.activeUsers.size;
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  public stopAll(): void {
    this.activeUsers.forEach((user) => {
      clearInterval(user.intervalId);
    });
    this.activeUsers.clear();
    console.log('–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–æ–º
  private async sendWordMessage(ctx: Context, word: GermanWord): Promise<void> {
    const message = this.formatWordMessage(word);
    await ctx.reply(message, { parse_mode: 'HTML' });
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–æ–º
  private formatWordMessage(word: GermanWord): string {
    let message = `üá©üá™ <b>${word.german}</b>\n`;
    message += `üá∑üá∫ <i>${word.russian}</i>\n`;
    
    if (word.pronunciation) {
      message += `üîä [${word.pronunciation}]\n`;
    }
    
    if (word.category) {
      message += `üìÇ ${word.category}`;
    }

    return message;
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  public async sendTestWord(ctx: Context): Promise<void> {
    const word = getRandomWord();
    const message = this.formatWordMessage(word);
    await ctx.reply(`üìö <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ª–æ–≤–æ:</b>\n\n${message}`, { parse_mode: 'HTML' });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  public getStats(): { activeUsers: number; intervalMs: number } {
    return {
      activeUsers: this.activeUsers.size,
      intervalMs: this.intervalMs
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const wordScheduler = new WordScheduler();
