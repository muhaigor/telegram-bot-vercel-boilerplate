import { Context, Telegraf } from 'telegraf';
import { getRandomWord, GermanWord } from '../data/german-words';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface SubscribedUser {
  userId: number;
  chatId: number;
  isActive: boolean;
}

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤
export class WordScheduler {
  private subscribedUsers: Map<number, SubscribedUser> = new Map();
  private readonly intervalMs: number = 15000; // 15 —Å–µ–∫—É–Ω–¥
  private globalIntervalId: NodeJS.Timeout | null = null;
  private bot: Telegraf | null = null;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä
  public initialize(bot: Telegraf): void {
    this.bot = bot;
    this.startGlobalTimer();
    console.log('WordScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω');
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  private startGlobalTimer(): void {
    if (this.globalIntervalId) {
      clearInterval(this.globalIntervalId);
    }

    this.globalIntervalId = setInterval(async () => {
      await this.sendWordsToAllSubscribers();
    }, this.intervalMs);

    console.log(`–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${this.intervalMs}–º—Å`);
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  private async sendWordsToAllSubscribers(): Promise<void> {
    if (!this.bot) return;

    const word = getRandomWord();
    const message = this.formatWordMessage(word);

    for (const [userId, user] of this.subscribedUsers) {
      if (user.isActive) {
        try {
          await this.bot.telegram.sendMessage(user.chatId, message, { parse_mode: 'HTML' });
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error);
          // –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          this.unsubscribeUser(userId);
        }
      }
    }
  }

  // –ü–æ–¥–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤
  public subscribeUser(userId: number, chatId: number, ctx: Context): void {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å—Ä–∞–∑—É
    this.sendFirstWord(ctx);

    this.subscribedUsers.set(userId, {
      userId,
      chatId,
      isActive: true
    });

    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤`);
  }

  // –û—Ç–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤
  public unsubscribeUser(userId: number): boolean {
    const user = this.subscribedUsers.get(userId);
    if (user) {
      this.subscribedUsers.delete(userId);
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤`);
      return true;
    }
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  public isUserSubscribed(userId: number): boolean {
    const user = this.subscribedUsers.get(userId);
    return user ? user.isActive : false;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  public getSubscribedUsersCount(): number {
    return this.subscribedUsers.size;
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –∏ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  public stopAll(): void {
    if (this.globalIntervalId) {
      clearInterval(this.globalIntervalId);
      this.globalIntervalId = null;
    }
    this.subscribedUsers.clear();
    console.log('–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç–ø–∏—Å–∞–Ω—ã');
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  private async sendFirstWord(ctx: Context): Promise<void> {
    try {
      const word = getRandomWord();
      const message = `üéØ <b>–ü–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ:</b>\n\n${this.formatWordMessage(word)}`;
      await ctx.reply(message, { parse_mode: 'HTML' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–æ–º
  private async sendWordMessage(ctx: Context, word: GermanWord): Promise<void> {
    const message = this.formatWordMessage(word);
    await ctx.reply(message, { parse_mode: 'HTML' });
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–æ–º
  private formatWordMessage(word: GermanWord): string {
    let message = `üá©üá™ <b>${word.ge}</b>\n`;
    message += `üá∑üá∫ <i>${word.ru}</i>`;

    return message;
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  public async sendTestWord(ctx: Context): Promise<void> {
    const word = getRandomWord();
    const message = this.formatWordMessage(word);
    await ctx.reply(`üìö <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ª–æ–≤–æ:</b>\n\n${message}`, { parse_mode: 'HTML' });
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  public getStats(): { subscribedUsers: number; intervalMs: number } {
    return {
      subscribedUsers: this.subscribedUsers.size,
      intervalMs: this.intervalMs
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const wordScheduler = new WordScheduler();
