import { Context } from 'telegraf';
import { wordScheduler } from '../services/word-scheduler';
import { createMainKeyboard, createStatsKeyboard, createMenuKeyboard } from '../services/inline-keyboard';
import { germanWords } from '../data/german-words';

export const callbackHandler = () => {
  return async (ctx: Context) => {
    const query = ctx.callbackQuery;
    if (!query || !('data' in query)) return;

    const userId = ctx.from?.id;
    const chatId = ctx.chat?.id;
    const data = query.data;

    if (!userId || !chatId) {
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    await ctx.answerCbQuery();

    try {
      switch (data) {
        case 'start':
          if (wordScheduler.isUserActive(userId)) {
            await ctx.editMessageText(
              '‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n' +
              '–°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ, –∞ –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ.\n' +
              '–£—á–∏—Å—å –ª–µ–≥–∫–æ –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üí™',
              { 
                parse_mode: 'HTML',
                ...createMainKeyboard(true)
              }
            );
          } else {
            wordScheduler.addUser(userId, chatId, ctx);
            await ctx.editMessageText(
              '‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n' +
              '–°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ, –∞ –∑–∞—Ç–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥ –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ.\n' +
              '–£—á–∏—Å—å –ª–µ–≥–∫–æ –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üí™',
              { 
                parse_mode: 'HTML',
                ...createMainKeyboard(true)
              }
            );
          }
          break;

        case 'stop':
          if (!wordScheduler.isUserActive(userId)) {
            await ctx.editMessageText(
              '‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n' +
              '–ù–∞–∂–º–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.',
              { 
                parse_mode: 'HTML',
                ...createMainKeyboard(false)
              }
            );
          } else {
            wordScheduler.removeUser(userId);
            await ctx.editMessageText(
              '‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n' +
              '–ù–∞–∂–º–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ.',
              { 
                parse_mode: 'HTML',
                ...createMainKeyboard(false)
              }
            );
          }
          break;

        case 'stats':
          const stats = wordScheduler.getStats();
          const totalWords = germanWords.length;
          const isUserActive = wordScheduler.isUserActive(userId);
          
          await ctx.editMessageText(
            `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n` +
            `üìö –°–ª–æ–≤ –≤ –±–∞–∑–µ: <b>${totalWords}</b>\n` +
            `üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>${stats.activeUsers}</b>\n` +
            `‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>15 —Å–µ–∫—É–Ω–¥</b>\n` +
            `üîÑ –í–∞—à —Å—Ç–∞—Ç—É—Å: <b>${isUserActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</b>`,
            { 
              parse_mode: 'HTML',
              ...createStatsKeyboard()
            }
          );
          break;

        case 'menu':
          const isActive = wordScheduler.isUserActive(userId);
          const status = isActive ? '‚úÖ –∞–∫—Ç–∏–≤–Ω–∞' : '‚ùå –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
          
          await ctx.editMessageText(
            `üéõÔ∏è <b>–ú–µ–Ω—é</b>\n\n` +
            `üì° –°—Ç–∞—Ç—É—Å: <b>${status}</b>\n` +
            `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`,
            { 
              parse_mode: 'HTML',
              ...createMenuKeyboard(isActive)
            }
          );
          break;

        default:
          await ctx.answerCbQuery('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ callback handler:', error);
      await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  };
};
